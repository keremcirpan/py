import yfinance as yf
import pandas as pd
from datetime import datetime

class MaxRollingReturns:
    def __init__(self, asset='^GSPC', years=20, window=22, move_direction='up'):
        """
        Initialize the class with asset ticker, years of data, window size, and move direction.
        
        Parameters:
        asset: The ticker symbol of the asset (default is S&P 500: '^GSPC')
        years: The number of years of data to fetch (default is 20)
        window: The maximum number of trading days for rolling returns (default is 22 days)
        move_direction: 'up' for positive returns, 'down' for negative returns (default is 'up')
        """
        self.asset = asset
        self.years = years
        self.window = window  # Upper limit for the window
        self.move_direction = move_direction.lower()
        self.data = None
        self.rolling_returns = None
    
    def fetch_data(self):
        """
        Fetch historical data for the specified asset and time period.
        """
        end_date = datetime.now().strftime('%Y-%m-%d')
        start_date = (datetime.now().year - self.years, datetime.now().month, datetime.now().day)
        start_date = datetime(*start_date).strftime('%Y-%m-%d')
        
        # Fetch data using yfinance for the specified asset
        self.data = yf.download(self.asset, start=start_date, end=end_date)
        if self.data.empty:
            raise ValueError(f"Could not retrieve data for {self.asset}")
    
    def calculate_rolling_returns(self):
        """
        Calculate rolling returns over the window range (from 1 day to 'window' days).
        """
        if self.data is None:
            raise ValueError("No data to calculate returns")
        
        # Ensure index is a datetime object
        self.data.index = pd.to_datetime(self.data.index)
        
        # Initialize a DataFrame to store the best returns for each date
        best_returns = pd.DataFrame(index=self.data.index)
        
        # Loop through each possible window size from 1 to 'window'
        for win in range(1, self.window + 1):
            rolling_return = self.data['Adj Close'].pct_change(win).dropna()
            best_returns[win] = rolling_return
        
        # Find the maximum return for each day across all window sizes
        if self.move_direction == 'up':
            self.rolling_returns = best_returns.max(axis=1)  # For upward movement, take the max
        elif self.move_direction == 'down':
            self.rolling_returns = best_returns.min(axis=1)  # For downward movement, take the min
        else:
            raise ValueError("move_direction must be 'up' or 'down'")
    
    def find_largest_rolling_returns(self, n=5):
        """
        Find the n largest non-overlapping rolling returns (up or down) with the best window size.
        
        Parameters:
        n: Number of largest returns to find (default is 5)
        
        Returns:
        A DataFrame of the n largest non-overlapping rolling returns with their start and end dates.
        """
        if self.rolling_returns is None:
            raise ValueError("No rolling returns calculated")
        
        # Sort returns based on move direction (up or down)
        if self.move_direction == 'up':
            sorted_returns = self.rolling_returns.sort_values(ascending=False)  # Largest returns
        elif self.move_direction == 'down':
            sorted_returns = self.rolling_returns.sort_values(ascending=True)  # Largest losses
        else:
            raise ValueError("move_direction must be 'up' or 'down'")
        
        # Select non-overlapping periods by ensuring a gap of at least the window size
        largest_returns = []
        used_dates = []
        
        for end_date, return_value in sorted_returns.items():
            if len(largest_returns) >= n:
                break
            
            # Ensure no overlap by checking the date range
            if all(abs((end_date - used_date).days) > self.window for used_date in used_dates):
                # Find the window that produced this max return by checking all windows
                for win in range(1, self.window + 1):
                    rolling_return = self.data['Adj Close'].pct_change(win).dropna()
                    if end_date in rolling_return.index and rolling_return[end_date] == return_value:
                        start_idx = self.data.index.get_loc(end_date) - win
                        if start_idx >= 0:
                            start_date = self.data.index[start_idx]  # Use the trading date index
                            largest_returns.append((start_date, end_date, return_value, win))
                            used_dates.append(end_date)  # Exclude dates within the next 'window' days
                            break  # Move to the next largest return
        
        # Create a DataFrame for the results with the window used for each return
        return pd.DataFrame(largest_returns, columns=['Start Date', 'End Date', 'Return', 'Window Size']).set_index('End Date')

# Example usage for largest up moves:
# sp500 = MaxRollingReturns(asset='^GSPC', years=20, window=22, move_direction='up')
# sp500.fetch_data()
# sp500.calculate_rolling_returns()
# largest_returns = sp500.find_largest_rolling_returns(n=5)
# print(largest_returns)

# Example usage for largest down moves:
# sp500 = MaxRollingReturns(asset='^GSPC', years=20, window=22, move_direction='down')
# sp500.fetch_data()
# sp500.calculate_rolling_returns()
# largest_down_moves = sp500.find_largest_rolling_returns(n=5)
# print(largest_down_moves)
